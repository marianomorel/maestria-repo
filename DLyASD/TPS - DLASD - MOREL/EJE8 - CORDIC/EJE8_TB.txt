module cordic_tb;

    parameter WIDTH = 16;
    parameter PIPELINE = 1;

    reg clk;
    reg rst;
    reg [WIDTH-1:0] x_in;
    reg [WIDTH-1:0] y_in;
    reg [WIDTH-1:0] z_in;
    reg rot_0vec_1;
    wire [WIDTH-1:0] x_out;
    wire [WIDTH-1:0] y_out;
    wire [WIDTH-1:0] z_out;

    // Instantiate the CORDIC module
    cordic #(
        .WIDTH(WIDTH),
        .PIPELINE(PIPELINE)
    ) uut (
        .clk(clk),
        .rst(rst),
        .x_in(x_in),
        .y_in(y_in),
        .z_in(z_in),
        .rot_0vec_1(rot_0vec_1),
        .x_out(x_out),
        .y_out(y_out),
        .z_out(z_out)
    );

    // Clock generation
    always #5 clk = ~clk;

    initial begin
      $dumpfile("dump.vcd"); $dumpvars;
        // Initialize signals
        clk = 0;
        rst = 1;
        x_in = 0;
        y_in = 0;
        z_in = 0;
        rot_0vec_1 = 0;

        // Reset pulse
        #10;
        rst = 0;
        #10;

        // Test case 1: Rotate (45 degrees)
        x_in = 16'h4000; // Example input value
        y_in = 16'h0000; // Example input value
        z_in = 16'h2000; // Example input value (angle)
        rot_0vec_1 = 1'b0;
        #10;

        // Wait for the output in case of pipeline
        if (PIPELINE) begin
            #160; // Wait for 16 cycles
        end else begin
            #10; // Small delay for combinational
        end

        // Display the result
        $display("Rotate 45 degrees:");
      $display("x_out = %d", x_out);
      $display("y_out = %d", y_out);
      $display("z_out = %d", z_out);

        // Test case 2: Vectorize
        x_in = 16'h3000; // Example input value
        y_in = 16'h3000; // Example input value
        z_in = 16'h0000; // Example input value (angle)
        rot_0vec_1 = 1'b1;
        #10;

        // Wait for the output in caso of pipeline
        if (PIPELINE) begin
            #160; // Wait for 16 cycles
        end else begin
            #10; // Small delay for combinational
        end

        // Display the result
        $display("Vectorize:");
      $display("x_out = %d", x_out);
      $display("y_out = %d", y_out);
      $display("z_out = %d", z_out);

        // End of simulation
        $finish;
    end
endmodule
