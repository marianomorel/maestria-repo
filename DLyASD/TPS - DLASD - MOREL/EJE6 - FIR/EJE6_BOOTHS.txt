module booths_multiplier (
    input clk,              
    input reset,            
    input start,            
    input [15:0] a_in,      
    input [15:0] b_in,      
    output [31:0] r_out,    
    output ready            
);


parameter idle = 2'b00;
parameter shift = 2'b01;
parameter add = 2'b10;


reg [1:0] state;
reg [1:0] state_next;

always @ (negedge clk or negedge reset)
begin
    if (~reset)
        state <= idle;
    else    
        state <= state_next;
end


reg [15:0] Q;    // Multiplicando
reg [15:0] A;    // Accumulator
reg q;           // Q[-1]
reg [4:0] n;     // num de iteraciones
reg [15:0] Q_next;
reg [15:0] A_next;
reg q_next;
reg [4:0] n_next;
reg [15:0] M;    // Multiplicador

always @(state, start, Q, Q_next, q_next, q)
begin
    case (state)
        idle: begin
            if (start) begin
                if (a_in[0] ^ 1'b0)
                    state_next <= add;
                else    
                    state_next <= shift;
            end
        end
        shift: begin
            if (n_next == 5'b0)
                state_next <= idle;
            else begin
                if (Q_next[0] ^ q_next)
                    state_next <= add;
                else    
                    state_next <= shift;
            end 
        end
        add: 
            state_next <= shift;
        default:
            state_next <= idle;
    endcase
end

// salida logica
assign ready = (state == idle);


always @(negedge clk or negedge reset)
begin
    if (~reset) begin
        Q <= 16'bx;
        A <= 16'b0;
        q <= 1'bx;
        n <= 5'd16;
    end else begin
        Q <= Q_next;
        A <= A_next;
        q <= q_next;
        n <= n_next;
    end
end


always @(state, start, A, Q, q, n)
begin
    case (state)
        idle: begin
            if (start) begin
                Q_next <= a_in;
                M <= b_in;
                A_next <= 16'b0;
                q_next <= 1'b0;
                n_next <= 5'd16;
            end
        end
        add: begin
            if ({Q[0], q} == 2'b10)
                A_next <= A - M;
            else 
                A_next <= A + M;
        end
        shift: begin
            {A_next, Q_next, q_next} <= {A[15], A, Q};
            n_next <= n - 1;
        end
    endcase
end


assign r_out = {A, Q};

endmodule


module fir_filter (
    input clk,
    input reset,
    input start,
    input [15:0] x_in,
    output [15:0] y_out,
    output ready
);
    parameter L = 16;
    
    // Coeficientes del filtro
    reg signed [15:0] h [0:L-1];

    // Registros de las muestras de entrada
    reg signed [15:0] x [0:L-1];
    integer i;

    // Salida de los multiplicadores
    wire signed [31:0] prod [0:L-1];

    // Instancia del multiplicador de Booth
    reg [L-1:0] mult_start;
    wire [L-1:0] mult_ready;
    
    generate
        genvar k;
        for (k = 0; k < L; k = k + 1) begin : booth_mult_gen
            booths_multiplier mult (
                .clk(clk),
                .reset(reset),
                .start(mult_start[k]),
                .a_in(x[k]),
                .b_in(h[k]),
                .r_out(prod[k]),
                .ready(mult_ready[k])
            );
        end
    endgenerate

    // Inicializar los coeficientes
    initial begin
        h[0] = 16'd15;
        h[1] = 16'd14;
        h[2] = 16'd13;
        h[3] = 16'd12;
        h[4] = 16'd11;
        h[5] = 16'd10;
        h[6] = 16'd9;
        h[7] = 16'd8;
        h[8] = 16'd8;
        h[9] = 16'd9;
        h[10] = 16'd10;
        h[11] = 16'd11;
        h[12] = 16'd12;
        h[13] = 16'd13;
        h[14] = 16'd14;
        h[15] = 16'd15;
    end

    // Suma de los productos
    reg signed [31:0] sum;
    reg signed [31:0] sum_next;

    // Estado del filtro FIR
    reg [1:0] state;
    parameter IDLE = 2'd0, CALC = 2'd1, DONE = 2'd2;

    always @(posedge clk or negedge reset) begin
        if (~reset) begin
            state <= IDLE;
            sum <= 32'd0;
            for (i = 0; i < L; i = i + 1) begin
                x[i] <= 16'd0;
            end
        end else begin
            case (state)
                IDLE: begin
                    if (start) begin
                        // Desplazar las muestras anteriores
                        for (i = L-1; i > 0; i = i - 1) begin
                            x[i] <= x[i-1];
                        end
                        x[0] <= x_in;

                        // Iniciar los multiplicadores
                        mult_start <= {L{1'b1}};
                        state <= CALC;
                    end
                end
                CALC: begin
                    // Verificar si todos los multiplicadores han terminado
                    if (&mult_ready) begin
                        sum_next = 32'd0;
                        for (i = 0; i < L; i = i + 1) begin
                            sum_next = sum_next + prod[i];
                        end
                        sum <= sum_next;
                        state <= DONE;
                    end
                end
                DONE: begin
                    state <= IDLE;
                end
            endcase
        end
    end

    // Salida del filtro
    assign y_out = (sum[31:16] != 16'h0000 && sum[31:16] != 16'hFFFF) ? 
                   (sum[31] ? 16'h8000 : 16'h7FFF) : sum[15:0]; // Saturación
    assign ready = (state == DONE);

endmodule

/* 
Descripción del funcionamiento:

Registro de estado: Se actualiza en cada flanco negativo del reloj o cuando reset es activo.
Lógica del próximo estado: Determina el próximo estado basado en el estado actual y ciertas condiciones.
Lógica de salida: Indica cuando el módulo está listo (ready).
Actualización de los registros de datos: Actualiza los registros Q, A, q y n en cada flanco negativo del reloj o reset.
Circuito de enrutamiento y multiplexación: Realiza las operaciones de adición y desplazamiento según el estado actual del algoritmo de Booth.

*/