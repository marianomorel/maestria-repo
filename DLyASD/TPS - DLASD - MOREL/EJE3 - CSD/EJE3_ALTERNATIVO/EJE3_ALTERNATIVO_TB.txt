`timescale 1ns / 1ps

module tb_csdigit;

// Inputs
reg signed [16:0] a;

// Outputs
wire signed [15:0] c;

// Instantiate the Unit Under Test (UUT)
csdigit uut (
    .a(a),
    .c(c)
);

initial begin
  $dumpfile("dump.vcd"); $dumpvars;
    // Initialize Inputs
    a = 0;

    // Test cases
    #10 a = 17'sb0000_0000_0000_0001; // Test 1: small positive number
    #10 a = 17'sb1111_1111_1111_1111; // Test 2: small negative number
    #10 a = 17'sb0111_1111_1111_1111; // Test 3: large positive number
    #10 a = 17'sb1000_0000_0000_0000; // Test 4: large negative number
    #10 a = 17'sb0001_0101_1010_1101; // Test 5: random positive number
    #10 a = 17'sb1110_1010_0101_0011; // Test 6: random negative number
    #10;
end

endmodule


module tb_bmul;

// Inputs
reg signed [15:0] m;
reg signed [16:0] q;

// Outputs
wire signed [31:0] p;

// Instantiate the Unit Under Test (UUT)
bmul uut (
    .m(m),
    .q(q),
    .p(p)
);

initial begin
    // Initialize Inputs
    m = 0;
    q = 0;

    // Test cases
    #10 m = 16'sb0000_0000_0000_0001; q = 17'sb0000_0000_0000_0001; // Test 1: small positive numbers
    #10 m = 16'sb1111_1111_1111_1111; q = 17'sb1111_1111_1111_1111; // Test 2: small negative numbers
    #10 m = 16'sb0111_1111_1111_1111; q = 17'sb0111_1111_1111_1111; // Test 3: large positive numbers
    #10 m = 16'sb1000_0000_0000_0000; q = 17'sb1000_0000_0000_0000; // Test 4: large negative numbers
    #10 m = 16'sb0001_0101_1010_1101; q = 17'sb0001_0101_1010_1101; // Test 5: random positive numbers
    #10 m = 16'sb1110_1010_0101_0011; q = 17'sb1110_1010_0101_0011; // Test 6: random negative numbers
    #10;
end

endmodule
