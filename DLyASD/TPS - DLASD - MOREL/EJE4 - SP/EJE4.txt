module multiplicador_3x3 (
    input wire clk,     // Reloj
    input wire reset,   // Reset asincrónico
    input wire x0, x1, x2,
    input wire y0, y1, y2,
    output reg [5:0] m  // Salida registrada
);

    reg [2:0] estado;

    // Variables para almacenar resultados parciales y carry-outs
    reg s0, s1, s2, s3, s4, s5;
    reg c1, c2, c3, c4, c5, c6;
    reg m0, m1, m2, m3, m4, m5;

    // Máquina de estados para controlar las filas
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Estado de reset
            estado <= 3'b000;
            s0 <= 1'b0;
            s1 <= 1'b0;
            s2 <= 1'b0;
            s3 <= 1'b0;
            s4 <= 1'b0;
            s5 <= 1'b0;
            c1 <= 1'b0;
            c2 <= 1'b0;
            c3 <= 1'b0;
            c4 <= 1'b0;
            c5 <= 1'b0;
            c6 <= 1'b0;
            m0 <= 1'b0;
            m1 <= 1'b0;
            m2 <= 1'b0;
            m3 <= 1'b0;
            m4 <= 1'b0;
            m5 <= 1'b0;
        end else begin
            // Condiciones adicionales
            if ((x2 == 0 && y2 == 0) || (x2 == 1 && y2 == 1)) begin
                // Se repite el mismo código pero la salida m es modificada
                case (estado)
                    3'b000: begin
                        // Fila 1
                        s0 <= x0 & y0;
                        m0 <= s0;
                        estado <= 3'b001;
                    end
                    3'b001: begin
                        // Fila 2
                        s1 <= (x0 & y1) ^ (x1 & y0);
                        c1 <= (x0 & y1) & (x1 & y0);
                        m1 <= s1;
                        estado <= 3'b010;
                    end
                    3'b010: begin
                        // Fila 3
                        s2 <= (x0 & y2) ^ (x1 & y1) ^ (x2 & y0);
                        c2 <= ((x0 & y2) & (x1 & y1)) | ((x1 & y1) & (x2 & y0)) | ((x2 & y0) & (x0 & y2));
                        c3 <= s2 & c1;
                        m2 <= s2 ^ c1;
                        estado <= 3'b011;
                    end
                    3'b011: begin
                        // Fila 4
                        s3 <= (x1 & y2) ^ (x2 & y1) ^ c2;
                        c4 <= ((x1 & y2) & (x2 & y1)) | ((x2 & y1) & c2) | ((x1 & y2) & c2);
                        c5 <= s3 & c3;
                        m3 <= s3 ^ c3;
                        estado <= 3'b100;
                    end
                    3'b100: begin
                        // Fila 5
                        s4 <= (x2 & y2) ^ c4;
                        c6 <= (x2 & y2) & c4;
                        m4 <= s4 ^ c5;
                        estado <= 3'b101;
                    end
                    3'b101: begin
                        // Fila 6
                        m5 <= c6 | (s4 & c5);
                        estado <= 3'b000;  // Volver al estado inicial
                    end
                    default: estado <= 3'b000;  // En caso de que no se cumpla ningún estado, volver al estado inicial
                endcase
                // Modificación de salida
                m <= {m5, m4, m3, m2, m1, m0};
              
            end else if (x2 == 0 && y2 == 1) begin
                // Condición específica
                reg [2:0] y_mod;
                assign y_mod = ~{y2, y1, y0} + 1'b1;  // Complemento a dos de y

                // Repetición del mismo código con variables modificadas
                case (estado)
                    3'b000: begin
                        // Fila 1
                        s0 <= x0 & y_mod[0];
                        m0 <= s0;
                        estado <= 3'b001;
                    end
                    3'b001: begin
                        // Fila 2
                        s1 <= (x0 & y_mod[1]) ^ (x1 & y_mod[0]);
                        c1 <= (x0 & y_mod[1]) & (x1 & y_mod[0]);
                        m1 <= s1;
                        estado <= 3'b010;
                    end
                    3'b010: begin
                        // Fila 3
                        s2 <= (x0 & y_mod[2]) ^ (x1 & y_mod[1]) ^ (x2 & y_mod[0]);
                        c2 <= ((x0 & y_mod[2]) & (x1 & y_mod[1])) | ((x1 & y_mod[1]) & (x2 & y_mod[0])) | ((x2 & y_mod[0]) & (x0 & y_mod[2]));
                        c3 <= s2 & c1;
                        m2 <= s2 ^ c1;
                        estado <= 3'b011;
                    end
                    3'b011: begin
                        // Fila 4
                        s3 <= (x1 & y_mod[2]) ^ (x2 & y_mod[1]) ^ c2;
                        c4 <= ((x1 & y_mod[2]) & (x2 & y_mod[1])) | ((x2 & y_mod[1]) & c2) | ((x1 & y_mod[2]) & c2);
                        c5 <= s3 & c3;
                        m3 <= s3 ^ c3;
                        estado <= 3'b100;
                    end
                    3'b100: begin
                        // Fila 5
                        s4 <= (x2 & y_mod[2]) ^ c4;
                        c6 <= (x2 & y_mod[2]) & c4;
                        m4 <= s4 ^ c5;
                        estado <= 3'b101;
                    end
                    3'b101: begin
                        // Fila 6
                        m5 <= c6 | (s4 & c5);
                        estado <= 3'b000;  // Volver al estado inicial
                    end
                    default: estado <= 3'b000;  // En caso de que no se cumpla ningún estado, volver al estado inicial
                endcase
                // Modificación de salida
                m <= ~{m5, m4, m3, m2, m1, m0} + 1'b1;
              //m[5] <= 1'b0;  // Asignación de ceros a m5, m4, m3
              
            end else if (x2 == 1 && y2 == 0) begin
                reg [2:0] x_mod;
                assign x_mod = ~{x2, x1, x0} + 1'b1;  // Complemento a dos de X

                // Repetición del mismo código con variables modificadas
                case (estado)
                    3'b000: begin
                        // Fila 1
                        s0 <= x_mod[0] & y0;
                        m0 <= s0;
                        estado <= 3'b001;
                    end
                    3'b001: begin
                        // Fila 2
                        s1 <= (x_mod[0] & y1) ^ (x_mod[1] & y0);
                        c1 <= (x_mod[0] & y1) & (x_mod[1] & y0);
                        m1 <= s1;
                        estado <= 3'b010;
                    end
                    3'b010: begin
                        // Fila 3
                        s2 <= (x_mod[0] & y2) ^ (x_mod[1] & y1) ^ (x_mod[2] & y0);
                        c2 <= ((x_mod[0] & y2) & (x_mod[1] & y1)) | ((x_mod[1] & y1) & (x_mod[2] & y0)) | ((x_mod[2] & y0) & (x_mod[0] & y2));
                        c3 <= s2 & c1;
                        m2 <= s2 ^ c1;
                        estado <= 3'b011;
                    end
                    3'b011: begin
                        // Fila 4
                        s3 <= (x_mod[1] & y2) ^ (x_mod[2] & y1) ^ c2;
                        c4 <= ((x_mod[1] & y2) & (x_mod[2] & y1)) | ((x_mod[2] & y1) & c2) | ((x_mod[1] & y2) & c2);
                        c5 <= s3 & c3;
                        m3 <= s3 ^ c3;
                        estado <= 3'b100;
                    end
                    3'b100: begin
                        // Fila 5
                        s4 <= (x_mod[2] & y2) ^ c4;
                        c6 <= (x_mod[2] & y2) & c4;
                        m4 <= s4 ^ c5;
                        estado <= 3'b101;
                    end
                    3'b101: begin
                        // Fila 6
                        m5 <= c6 | (s4 & c5);
                        estado <= 3'b000;  // Volver al estado inicial
                    end
                    default: estado <= 3'b000;  // En caso de que no se cumpla ningún estado, volver al estado inicial
                endcase
                // Modificación de salida
                m <= ~{m5, m4, m3, m2, m1, m0} + 1'b1;
              m[5] <= 1'b0;  // Asignación de ceros a m5, m4, m3
            end
        end
    end

endmodule


// este codigo orginalmente estaba preparado para numeros sin signo
// se lo modificó para complemento a 2
//es por eso que aparece m5 y algun carry de mas
//el codigo hace una multiplicacion, de modo que si son los dos + o los dos negativos, hace una multiplicacion normal y da positivo. si uno de los dos operandos es negativo, complementa al negativo el negativo, hace la multiplicacion (serie paralelo como se pide) y luego se complementa el resultado